#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rest-server:server');
var http = require('http');
var fs = require('fs'); //fs module is a core module of NodeJS
var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('secPort', port+443); //443 is chosen as the default port for HTTPS!!!!!

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.log("Server listening on port ", app.get('port'));
});
server.on('error', onError);
server.on('listening', onListening);


/**
 * Create a HTTPS server
 */
var options = {
    key: fs.readFileSync(__dirname + '/private.key'),  //Synchronous version of fs.readFile. Returns the contents of the file.
    cert: fs.readFileSync(__dirname + '/certificate.pem')  //Asynchronous version fs.readFile('xxxxxx', function(err, data){.........})
    //Synchronous usage tend to return a value we expect, like JAVA APIs
    //Asynchronous usage will not return a value, instead, it'll execute a callback function to process error info or do subsequent things!!!!!
};
var secureServer = https.createServer(options, app);

/**
 * Listening on provided port, on all network interfaces
 */
secureServer.listen(app.get('secPort'), function () { //app.set('name', value)<=======>app.get('name')
    console.log('Server listening on port ', app.get('secPort'))
});
secureServer.on('error', onError);
secureServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
